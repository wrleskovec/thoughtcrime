'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _lodash = require('lodash.isfunction');

var _lodash2 = _interopRequireDefault(_lodash);

var _lodash3 = require('lodash.isobject');

var _lodash4 = _interopRequireDefault(_lodash3);

var _actions = require('./actions');

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function swallow() {}

function warnAboutConfusingFiltering(blacklist, whitelist) {
    blacklist.filter(function (item) {
        return whitelist.indexOf(item) !== -1;
    }).forEach(function (item) {
        console.warn( // eslint-disable-line no-console
        '[redux-storage] Action ' + item + ' is on BOTH black- and whitelist.' + ' This is most likely a mistake!');
    });
}

function isValidAction(action) {
    var isFunc = (0, _lodash2['default'])(action);
    var isObj = (0, _lodash4['default'])(action);
    var hasType = isObj && action.hasOwnProperty('type');

    if (!isFunc && isObj && hasType) {
        return true;
    }

    if (process.env.NODE_ENV !== 'production') {
        if (isFunc) {
            console.warn( // eslint-disable-line no-console
            '[redux-storage] ACTION IGNORED! Actions should be objects' + ' with a type property but received a function! Your' + ' function resolving middleware (e.g. redux-thunk) must be' + ' placed BEFORE redux-storage!');
        } else if (!isObj) {
            console.warn( // eslint-disable-line no-console
            '[redux-storage] ACTION IGNORED! Actions should be objects' + (' with a type property but received: ' + action));
        } else if (!hasType) {
            console.warn( // eslint-disable-line no-console
            '[redux-storage] ACTION IGNORED! Action objects should have' + ' a type property.');
        }
    }

    return false;
}

exports['default'] = function (engine) {
    var actionBlacklist = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];
    var actionWhitelist = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];

    // Also don't save if we process our own actions
    var blacklistedActions = [].concat(_toConsumableArray(actionBlacklist), [_constants.LOAD, _constants.SAVE]);

    if (process.env.NODE_ENV !== 'production') {
        warnAboutConfusingFiltering(actionBlacklist, actionWhitelist);
    }

    return function (_ref) {
        var dispatch = _ref.dispatch;
        var getState = _ref.getState;

        return function (next) {
            return function (action) {
                var result = next(action);

                if (!isValidAction(action)) {
                    return result;
                }

                var isOnBlacklist = blacklistedActions.indexOf(action.type) !== -1;
                var isOnWhitelist = actionWhitelist.length === 0 ? true // Don't filter if the whitelist is empty
                : actionWhitelist.indexOf(action.type) !== -1;

                // Skip blacklisted actions
                if (!isOnBlacklist && isOnWhitelist) {
                    (function () {
                        var saveState = getState();
                        var saveAction = (0, _actions.save)(saveState);

                        if (process.env.NODE_ENV !== 'production') {
                            if (!saveAction.meta) {
                                saveAction.meta = {};
                            }
                            saveAction.meta.origin = action;
                        }

                        var dispatchSave = function dispatchSave() {
                            return dispatch(saveAction);
                        };
                        engine.save(saveState).then(dispatchSave)['catch'](swallow);
                    })();
                }

                return result;
            };
        };
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jcmVhdGVNaWRkbGV3YXJlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFFQTs7QUFDQTs7Ozs7O0FBRUEsU0FBUyxPQUFULEdBQW1CLENBQ2xCOztBQUVELFNBQVMsMkJBQVQsQ0FBcUMsU0FBckMsRUFBZ0QsU0FBaEQsRUFBMkQ7QUFDdkQsY0FDSyxNQURMLENBQ1ksVUFBQyxJQUFEO0FBQUEsZUFBVSxVQUFVLE9BQVYsQ0FBa0IsSUFBbEIsTUFBNEIsQ0FBQyxDQUF2QztBQUFBLEtBRFosRUFFSyxPQUZMLENBRWEsVUFBQyxJQUFELEVBQVU7QUFDZixnQkFBUSxJQUFSLEM7QUFDSSxvQ0FBMEIsSUFBMUIsMEVBREo7QUFJSCxLQVBMO0FBUUg7O0FBRUQsU0FBUyxhQUFULENBQXVCLE1BQXZCLEVBQStCO0FBQzNCLFFBQU0sU0FBUyx5QkFBVyxNQUFYLENBQWY7QUFDQSxRQUFNLFFBQVEseUJBQVMsTUFBVCxDQUFkO0FBQ0EsUUFBTSxVQUFVLFNBQVMsT0FBTyxjQUFQLENBQXNCLE1BQXRCLENBQXpCOztBQUVBLFFBQUksQ0FBQyxNQUFELElBQVcsS0FBWCxJQUFvQixPQUF4QixFQUFpQztBQUM3QixlQUFPLElBQVA7QUFDSDs7QUFFRCxRQUFJLFFBQVEsR0FBUixDQUFZLFFBQVosS0FBeUIsWUFBN0IsRUFBMkM7QUFDdkMsWUFBSSxNQUFKLEVBQVk7QUFDUixvQkFBUSxJQUFSLEM7QUFDSSwrTkFESjtBQU1ILFNBUEQsTUFPTyxJQUFJLENBQUMsS0FBTCxFQUFZO0FBQ2Ysb0JBQVEsSUFBUixDO0FBQ0ksb0hBQ3lDLE1BRHpDLENBREo7QUFJSCxTQUxNLE1BS0EsSUFBSSxDQUFDLE9BQUwsRUFBYztBQUNqQixvQkFBUSxJQUFSLEM7QUFDSSw4RkFESjtBQUlIO0FBQ0o7O0FBRUQsV0FBTyxLQUFQO0FBQ0g7O3FCQUdjLFVBQUMsTUFBRCxFQUF3RDtBQUFBLFFBQS9DLGVBQStDLHlEQUE3QixFQUE2QjtBQUFBLFFBQXpCLGVBQXlCLHlEQUFQLEVBQU87OztBQUVuRSxRQUFNLGtEQUF5QixlQUF6QixzQ0FBTjs7QUFFQSxRQUFJLFFBQVEsR0FBUixDQUFZLFFBQVosS0FBeUIsWUFBN0IsRUFBMkM7QUFDdkMsb0NBQTRCLGVBQTVCLEVBQTZDLGVBQTdDO0FBQ0g7O0FBRUQsV0FBTyxnQkFBNEI7QUFBQSxZQUF6QixRQUF5QixRQUF6QixRQUF5QjtBQUFBLFlBQWYsUUFBZSxRQUFmLFFBQWU7O0FBQy9CLGVBQU8sVUFBQyxJQUFEO0FBQUEsbUJBQVUsVUFBQyxNQUFELEVBQVk7QUFDekIsb0JBQU0sU0FBUyxLQUFLLE1BQUwsQ0FBZjs7QUFFQSxvQkFBSSxDQUFDLGNBQWMsTUFBZCxDQUFMLEVBQTRCO0FBQ3hCLDJCQUFPLE1BQVA7QUFDSDs7QUFFRCxvQkFBTSxnQkFBZ0IsbUJBQW1CLE9BQW5CLENBQTJCLE9BQU8sSUFBbEMsTUFBNEMsQ0FBQyxDQUFuRTtBQUNBLG9CQUFNLGdCQUFnQixnQkFBZ0IsTUFBaEIsS0FBMkIsQ0FBM0IsR0FDaEIsSTtBQURnQixrQkFFaEIsZ0JBQWdCLE9BQWhCLENBQXdCLE9BQU8sSUFBL0IsTUFBeUMsQ0FBQyxDQUZoRDs7O0FBS0Esb0JBQUksQ0FBQyxhQUFELElBQWtCLGFBQXRCLEVBQXFDO0FBQUE7QUFDakMsNEJBQU0sWUFBWSxVQUFsQjtBQUNBLDRCQUFNLGFBQWEsbUJBQVcsU0FBWCxDQUFuQjs7QUFFQSw0QkFBSSxRQUFRLEdBQVIsQ0FBWSxRQUFaLEtBQXlCLFlBQTdCLEVBQTJDO0FBQ3ZDLGdDQUFJLENBQUMsV0FBVyxJQUFoQixFQUFzQjtBQUNsQiwyQ0FBVyxJQUFYLEdBQWtCLEVBQWxCO0FBQ0g7QUFDRCx1Q0FBVyxJQUFYLENBQWdCLE1BQWhCLEdBQXlCLE1BQXpCO0FBQ0g7O0FBRUQsNEJBQU0sZUFBZSxTQUFmLFlBQWU7QUFBQSxtQ0FBTSxTQUFTLFVBQVQsQ0FBTjtBQUFBLHlCQUFyQjtBQUNBLCtCQUFPLElBQVAsQ0FBWSxTQUFaLEVBQXVCLElBQXZCLENBQTRCLFlBQTVCLFdBQWdELE9BQWhEO0FBWmlDO0FBYXBDOztBQUVELHVCQUFPLE1BQVA7QUFDSCxhQTdCTTtBQUFBLFNBQVA7QUE4QkgsS0EvQkQ7QUFnQ0gsQyIsImZpbGUiOiJjcmVhdGVNaWRkbGV3YXJlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnbG9kYXNoLmlzZnVuY3Rpb24nO1xuaW1wb3J0IGlzT2JqZWN0IGZyb20gJ2xvZGFzaC5pc29iamVjdCc7XG5cbmltcG9ydCB7IHNhdmUgYXMgYWN0aW9uU2F2ZSB9IGZyb20gJy4vYWN0aW9ucyc7XG5pbXBvcnQgeyBMT0FELCBTQVZFIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuXG5mdW5jdGlvbiBzd2FsbG93KCkge1xufVxuXG5mdW5jdGlvbiB3YXJuQWJvdXRDb25mdXNpbmdGaWx0ZXJpbmcoYmxhY2tsaXN0LCB3aGl0ZWxpc3QpIHtcbiAgICBibGFja2xpc3RcbiAgICAgICAgLmZpbHRlcigoaXRlbSkgPT4gd2hpdGVsaXN0LmluZGV4T2YoaXRlbSkgIT09IC0xKVxuICAgICAgICAuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICAgICAgICBgW3JlZHV4LXN0b3JhZ2VdIEFjdGlvbiAke2l0ZW19IGlzIG9uIEJPVEggYmxhY2stIGFuZCB3aGl0ZWxpc3QuYFxuICAgICAgICAgICAgICAgICsgYCBUaGlzIGlzIG1vc3QgbGlrZWx5IGEgbWlzdGFrZSFgXG4gICAgICAgICAgICApO1xuICAgICAgICB9KTtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZEFjdGlvbihhY3Rpb24pIHtcbiAgICBjb25zdCBpc0Z1bmMgPSBpc0Z1bmN0aW9uKGFjdGlvbik7XG4gICAgY29uc3QgaXNPYmogPSBpc09iamVjdChhY3Rpb24pO1xuICAgIGNvbnN0IGhhc1R5cGUgPSBpc09iaiAmJiBhY3Rpb24uaGFzT3duUHJvcGVydHkoJ3R5cGUnKTtcblxuICAgIGlmICghaXNGdW5jICYmIGlzT2JqICYmIGhhc1R5cGUpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKGlzRnVuYykge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICAgICAgICBgW3JlZHV4LXN0b3JhZ2VdIEFDVElPTiBJR05PUkVEISBBY3Rpb25zIHNob3VsZCBiZSBvYmplY3RzYFxuICAgICAgICAgICAgICAgICsgYCB3aXRoIGEgdHlwZSBwcm9wZXJ0eSBidXQgcmVjZWl2ZWQgYSBmdW5jdGlvbiEgWW91cmBcbiAgICAgICAgICAgICAgICArIGAgZnVuY3Rpb24gcmVzb2x2aW5nIG1pZGRsZXdhcmUgKGUuZy4gcmVkdXgtdGh1bmspIG11c3QgYmVgXG4gICAgICAgICAgICAgICAgKyBgIHBsYWNlZCBCRUZPUkUgcmVkdXgtc3RvcmFnZSFgXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2UgaWYgKCFpc09iaikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICAgICAgICBgW3JlZHV4LXN0b3JhZ2VdIEFDVElPTiBJR05PUkVEISBBY3Rpb25zIHNob3VsZCBiZSBvYmplY3RzYFxuICAgICAgICAgICAgICAgICsgYCB3aXRoIGEgdHlwZSBwcm9wZXJ0eSBidXQgcmVjZWl2ZWQ6ICR7YWN0aW9ufWBcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSBpZiAoIWhhc1R5cGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybiggLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgICAgICAgYFtyZWR1eC1zdG9yYWdlXSBBQ1RJT04gSUdOT1JFRCEgQWN0aW9uIG9iamVjdHMgc2hvdWxkIGhhdmVgXG4gICAgICAgICAgICAgICAgKyBgIGEgdHlwZSBwcm9wZXJ0eS5gXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5cbmV4cG9ydCBkZWZhdWx0IChlbmdpbmUsIGFjdGlvbkJsYWNrbGlzdCA9IFtdLCBhY3Rpb25XaGl0ZWxpc3QgPSBbXSkgPT4ge1xuICAgIC8vIEFsc28gZG9uJ3Qgc2F2ZSBpZiB3ZSBwcm9jZXNzIG91ciBvd24gYWN0aW9uc1xuICAgIGNvbnN0IGJsYWNrbGlzdGVkQWN0aW9ucyA9IFsuLi5hY3Rpb25CbGFja2xpc3QsIExPQUQsIFNBVkVdO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FybkFib3V0Q29uZnVzaW5nRmlsdGVyaW5nKGFjdGlvbkJsYWNrbGlzdCwgYWN0aW9uV2hpdGVsaXN0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gKHsgZGlzcGF0Y2gsIGdldFN0YXRlIH0pID0+IHtcbiAgICAgICAgcmV0dXJuIChuZXh0KSA9PiAoYWN0aW9uKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBuZXh0KGFjdGlvbik7XG5cbiAgICAgICAgICAgIGlmICghaXNWYWxpZEFjdGlvbihhY3Rpb24pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgaXNPbkJsYWNrbGlzdCA9IGJsYWNrbGlzdGVkQWN0aW9ucy5pbmRleE9mKGFjdGlvbi50eXBlKSAhPT0gLTE7XG4gICAgICAgICAgICBjb25zdCBpc09uV2hpdGVsaXN0ID0gYWN0aW9uV2hpdGVsaXN0Lmxlbmd0aCA9PT0gMFxuICAgICAgICAgICAgICAgID8gdHJ1ZSAvLyBEb24ndCBmaWx0ZXIgaWYgdGhlIHdoaXRlbGlzdCBpcyBlbXB0eVxuICAgICAgICAgICAgICAgIDogYWN0aW9uV2hpdGVsaXN0LmluZGV4T2YoYWN0aW9uLnR5cGUpICE9PSAtMTtcblxuICAgICAgICAgICAgLy8gU2tpcCBibGFja2xpc3RlZCBhY3Rpb25zXG4gICAgICAgICAgICBpZiAoIWlzT25CbGFja2xpc3QgJiYgaXNPbldoaXRlbGlzdCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNhdmVTdGF0ZSA9IGdldFN0YXRlKCk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2F2ZUFjdGlvbiA9IGFjdGlvblNhdmUoc2F2ZVN0YXRlKTtcblxuICAgICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghc2F2ZUFjdGlvbi5tZXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzYXZlQWN0aW9uLm1ldGEgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzYXZlQWN0aW9uLm1ldGEub3JpZ2luID0gYWN0aW9uO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IGRpc3BhdGNoU2F2ZSA9ICgpID0+IGRpc3BhdGNoKHNhdmVBY3Rpb24pO1xuICAgICAgICAgICAgICAgIGVuZ2luZS5zYXZlKHNhdmVTdGF0ZSkudGhlbihkaXNwYXRjaFNhdmUpLmNhdGNoKHN3YWxsb3cpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9O1xuICAgIH07XG59O1xuIl19